// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: metrics.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricType int32

const (
	MetricType_METRIC_TYPE_UNSPECIFIED   MetricType = 0
	MetricType_METRIC_TYPE_METHOD        MetricType = 1
	MetricType_METRIC_TYPE_HTTP          MetricType = 2
	MetricType_METRIC_TYPE_RDS           MetricType = 3
	MetricType_METRIC_TYPE_REDIS         MetricType = 4
	MetricType_METRIC_TYPE_HBASE         MetricType = 5
	MetricType_METRIC_TYPE_CONTROLLER    MetricType = 6
	MetricType_METRIC_TYPE_GRPC          MetricType = 7
	MetricType_METRIC_TYPE_KAFKA         MetricType = 8
	MetricType_METRIC_TYPE_ELASTICSEARCH MetricType = 9
	MetricType_METRIC_TYPE_CUSTOM        MetricType = 10
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0:  "METRIC_TYPE_UNSPECIFIED",
		1:  "METRIC_TYPE_METHOD",
		2:  "METRIC_TYPE_HTTP",
		3:  "METRIC_TYPE_RDS",
		4:  "METRIC_TYPE_REDIS",
		5:  "METRIC_TYPE_HBASE",
		6:  "METRIC_TYPE_CONTROLLER",
		7:  "METRIC_TYPE_GRPC",
		8:  "METRIC_TYPE_KAFKA",
		9:  "METRIC_TYPE_ELASTICSEARCH",
		10: "METRIC_TYPE_CUSTOM",
	}
	MetricType_value = map[string]int32{
		"METRIC_TYPE_UNSPECIFIED":   0,
		"METRIC_TYPE_METHOD":        1,
		"METRIC_TYPE_HTTP":          2,
		"METRIC_TYPE_RDS":           3,
		"METRIC_TYPE_REDIS":         4,
		"METRIC_TYPE_HBASE":         5,
		"METRIC_TYPE_CONTROLLER":    6,
		"METRIC_TYPE_GRPC":          7,
		"METRIC_TYPE_KAFKA":         8,
		"METRIC_TYPE_ELASTICSEARCH": 9,
		"METRIC_TYPE_CUSTOM":        10,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_metrics_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_metrics_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{0}
}

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN         HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING         HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING     HealthCheckResponse_ServingStatus = 2
	HealthCheckResponse_SERVICE_UNKNOWN HealthCheckResponse_ServingStatus = 3
)

// Enum value maps for HealthCheckResponse_ServingStatus.
var (
	HealthCheckResponse_ServingStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
		3: "SERVICE_UNKNOWN",
	}
	HealthCheckResponse_ServingStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVING":         1,
		"NOT_SERVING":     2,
		"SERVICE_UNKNOWN": 3,
	}
)

func (x HealthCheckResponse_ServingStatus) Enum() *HealthCheckResponse_ServingStatus {
	p := new(HealthCheckResponse_ServingStatus)
	*p = x
	return p
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckResponse_ServingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_metrics_proto_enumTypes[1].Descriptor()
}

func (HealthCheckResponse_ServingStatus) Type() protoreflect.EnumType {
	return &file_metrics_proto_enumTypes[1]
}

func (x HealthCheckResponse_ServingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckResponse_ServingStatus.Descriptor instead.
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{7, 0}
}

type MetricData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MetricId      string                 `protobuf:"bytes,1,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MetricType    MetricType             `protobuf:"varint,3,opt,name=metric_type,json=metricType,proto3,enum=digestlogger.metrics.MetricType" json:"metric_type,omitempty"`
	Service       string                 `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Operation     string                 `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	LatencyMs     int64                  `protobuf:"varint,6,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	Success       bool                   `protobuf:"varint,7,opt,name=success,proto3" json:"success,omitempty"`
	Topology      *ServiceTopology       `protobuf:"bytes,8,opt,name=topology,proto3" json:"topology,omitempty"`
	Attributes    map[string]string      `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Error         *ErrorInfo             `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Application   string                 `protobuf:"bytes,12,opt,name=application,proto3" json:"application,omitempty"`
	Environment   string                 `protobuf:"bytes,13,opt,name=environment,proto3" json:"environment,omitempty"`
	Version       string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricData) Reset() {
	*x = MetricData{}
	mi := &file_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricData) ProtoMessage() {}

func (x *MetricData) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricData.ProtoReflect.Descriptor instead.
func (*MetricData) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *MetricData) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

func (x *MetricData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MetricData) GetMetricType() MetricType {
	if x != nil {
		return x.MetricType
	}
	return MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *MetricData) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *MetricData) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *MetricData) GetLatencyMs() int64 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

func (x *MetricData) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MetricData) GetTopology() *ServiceTopology {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *MetricData) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *MetricData) GetError() *ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MetricData) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MetricData) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *MetricData) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *MetricData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ServiceTopology struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UpstreamServices   []string               `protobuf:"bytes,1,rep,name=upstream_services,json=upstreamServices,proto3" json:"upstream_services,omitempty"`
	DownstreamServices []string               `protobuf:"bytes,2,rep,name=downstream_services,json=downstreamServices,proto3" json:"downstream_services,omitempty"`
	UpstreamLinks      []string               `protobuf:"bytes,3,rep,name=upstream_links,json=upstreamLinks,proto3" json:"upstream_links,omitempty"`
	DownstreamLinks    []string               `protobuf:"bytes,4,rep,name=downstream_links,json=downstreamLinks,proto3" json:"downstream_links,omitempty"`
	Cluster            string                 `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace          string                 `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ServiceTopology) Reset() {
	*x = ServiceTopology{}
	mi := &file_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTopology) ProtoMessage() {}

func (x *ServiceTopology) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTopology.ProtoReflect.Descriptor instead.
func (*ServiceTopology) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceTopology) GetUpstreamServices() []string {
	if x != nil {
		return x.UpstreamServices
	}
	return nil
}

func (x *ServiceTopology) GetDownstreamServices() []string {
	if x != nil {
		return x.DownstreamServices
	}
	return nil
}

func (x *ServiceTopology) GetUpstreamLinks() []string {
	if x != nil {
		return x.UpstreamLinks
	}
	return nil
}

func (x *ServiceTopology) GetDownstreamLinks() []string {
	if x != nil {
		return x.DownstreamLinks
	}
	return nil
}

func (x *ServiceTopology) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ServiceTopology) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ErrorInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorType     string                 `protobuf:"bytes,1,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorCode     string                 `protobuf:"bytes,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	StackTrace    string                 `protobuf:"bytes,4,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	Retryable     bool                   `protobuf:"varint,5,opt,name=retryable,proto3" json:"retryable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	mi := &file_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorInfo) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

func (x *ErrorInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ErrorInfo) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *ErrorInfo) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

func (x *ErrorInfo) GetRetryable() bool {
	if x != nil {
		return x.Retryable
	}
	return false
}

type MetricBatch struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Metrics        []*MetricData          `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	BatchId        string                 `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	BatchTimestamp int64                  `protobuf:"varint,3,opt,name=batch_timestamp,json=batchTimestamp,proto3" json:"batch_timestamp,omitempty"`
	SourceService  string                 `protobuf:"bytes,4,opt,name=source_service,json=sourceService,proto3" json:"source_service,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MetricBatch) Reset() {
	*x = MetricBatch{}
	mi := &file_metrics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricBatch) ProtoMessage() {}

func (x *MetricBatch) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricBatch.ProtoReflect.Descriptor instead.
func (*MetricBatch) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *MetricBatch) GetMetrics() []*MetricData {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *MetricBatch) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *MetricBatch) GetBatchTimestamp() int64 {
	if x != nil {
		return x.BatchTimestamp
	}
	return 0
}

func (x *MetricBatch) GetSourceService() string {
	if x != nil {
		return x.SourceService
	}
	return ""
}

type MetricResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MetricId      string                 `protobuf:"bytes,3,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricResponse) Reset() {
	*x = MetricResponse{}
	mi := &file_metrics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricResponse) ProtoMessage() {}

func (x *MetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricResponse.ProtoReflect.Descriptor instead.
func (*MetricResponse) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *MetricResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MetricResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MetricResponse) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

type MetricBatchResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message         string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ProcessedCount  int32                  `protobuf:"varint,3,opt,name=processed_count,json=processedCount,proto3" json:"processed_count,omitempty"`
	FailedCount     int32                  `protobuf:"varint,4,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	FailedMetricIds []string               `protobuf:"bytes,5,rep,name=failed_metric_ids,json=failedMetricIds,proto3" json:"failed_metric_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MetricBatchResponse) Reset() {
	*x = MetricBatchResponse{}
	mi := &file_metrics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricBatchResponse) ProtoMessage() {}

func (x *MetricBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricBatchResponse.ProtoReflect.Descriptor instead.
func (*MetricBatchResponse) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *MetricBatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MetricBatchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MetricBatchResponse) GetProcessedCount() int32 {
	if x != nil {
		return x.ProcessedCount
	}
	return 0
}

func (x *MetricBatchResponse) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *MetricBatchResponse) GetFailedMetricIds() []string {
	if x != nil {
		return x.FailedMetricIds
	}
	return nil
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_metrics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *HealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Status        HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=digestlogger.metrics.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
	Message       string                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_metrics_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{7}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_UNKNOWN
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_metrics_proto protoreflect.FileDescriptor

const file_metrics_proto_rawDesc = "" +
	"\n" +
	"\rmetrics.proto\x12\x14digestlogger.metrics\"\xed\x05\n" +
	"\n" +
	"MetricData\x12\x1b\n" +
	"\tmetric_id\x18\x01 \x01(\tR\bmetricId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12A\n" +
	"\vmetric_type\x18\x03 \x01(\x0e2 .digestlogger.metrics.MetricTypeR\n" +
	"metricType\x12\x18\n" +
	"\aservice\x18\x04 \x01(\tR\aservice\x12\x1c\n" +
	"\toperation\x18\x05 \x01(\tR\toperation\x12\x1d\n" +
	"\n" +
	"latency_ms\x18\x06 \x01(\x03R\tlatencyMs\x12\x18\n" +
	"\asuccess\x18\a \x01(\bR\asuccess\x12A\n" +
	"\btopology\x18\b \x01(\v2%.digestlogger.metrics.ServiceTopologyR\btopology\x12P\n" +
	"\n" +
	"attributes\x18\t \x03(\v20.digestlogger.metrics.MetricData.AttributesEntryR\n" +
	"attributes\x125\n" +
	"\x05error\x18\n" +
	" \x01(\v2\x1f.digestlogger.metrics.ErrorInfoR\x05error\x12J\n" +
	"\bmetadata\x18\v \x03(\v2..digestlogger.metrics.MetricData.MetadataEntryR\bmetadata\x12 \n" +
	"\vapplication\x18\f \x01(\tR\vapplication\x12 \n" +
	"\venvironment\x18\r \x01(\tR\venvironment\x12\x18\n" +
	"\aversion\x18\x0e \x01(\tR\aversion\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf9\x01\n" +
	"\x0fServiceTopology\x12+\n" +
	"\x11upstream_services\x18\x01 \x03(\tR\x10upstreamServices\x12/\n" +
	"\x13downstream_services\x18\x02 \x03(\tR\x12downstreamServices\x12%\n" +
	"\x0eupstream_links\x18\x03 \x03(\tR\rupstreamLinks\x12)\n" +
	"\x10downstream_links\x18\x04 \x03(\tR\x0fdownstreamLinks\x12\x18\n" +
	"\acluster\x18\x05 \x01(\tR\acluster\x12\x1c\n" +
	"\tnamespace\x18\x06 \x01(\tR\tnamespace\"\xad\x01\n" +
	"\tErrorInfo\x12\x1d\n" +
	"\n" +
	"error_type\x18\x01 \x01(\tR\terrorType\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"error_code\x18\x03 \x01(\tR\terrorCode\x12\x1f\n" +
	"\vstack_trace\x18\x04 \x01(\tR\n" +
	"stackTrace\x12\x1c\n" +
	"\tretryable\x18\x05 \x01(\bR\tretryable\"\xb4\x01\n" +
	"\vMetricBatch\x12:\n" +
	"\ametrics\x18\x01 \x03(\v2 .digestlogger.metrics.MetricDataR\ametrics\x12\x19\n" +
	"\bbatch_id\x18\x02 \x01(\tR\abatchId\x12'\n" +
	"\x0fbatch_timestamp\x18\x03 \x01(\x03R\x0ebatchTimestamp\x12%\n" +
	"\x0esource_service\x18\x04 \x01(\tR\rsourceService\"a\n" +
	"\x0eMetricResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1b\n" +
	"\tmetric_id\x18\x03 \x01(\tR\bmetricId\"\xc1\x01\n" +
	"\x13MetricBatchResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12'\n" +
	"\x0fprocessed_count\x18\x03 \x01(\x05R\x0eprocessedCount\x12!\n" +
	"\ffailed_count\x18\x04 \x01(\x05R\vfailedCount\x12*\n" +
	"\x11failed_metric_ids\x18\x05 \x03(\tR\x0ffailedMetricIds\".\n" +
	"\x12HealthCheckRequest\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\"\xd1\x01\n" +
	"\x13HealthCheckResponse\x12O\n" +
	"\x06status\x18\x01 \x01(\x0e27.digestlogger.metrics.HealthCheckResponse.ServingStatusR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"O\n" +
	"\rServingStatus\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aSERVING\x10\x01\x12\x0f\n" +
	"\vNOT_SERVING\x10\x02\x12\x13\n" +
	"\x0fSERVICE_UNKNOWN\x10\x03*\x9a\x02\n" +
	"\n" +
	"MetricType\x12\x1b\n" +
	"\x17METRIC_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12METRIC_TYPE_METHOD\x10\x01\x12\x14\n" +
	"\x10METRIC_TYPE_HTTP\x10\x02\x12\x13\n" +
	"\x0fMETRIC_TYPE_RDS\x10\x03\x12\x15\n" +
	"\x11METRIC_TYPE_REDIS\x10\x04\x12\x15\n" +
	"\x11METRIC_TYPE_HBASE\x10\x05\x12\x1a\n" +
	"\x16METRIC_TYPE_CONTROLLER\x10\x06\x12\x14\n" +
	"\x10METRIC_TYPE_GRPC\x10\a\x12\x15\n" +
	"\x11METRIC_TYPE_KAFKA\x10\b\x12\x1d\n" +
	"\x19METRIC_TYPE_ELASTICSEARCH\x10\t\x12\x16\n" +
	"\x12METRIC_TYPE_CUSTOM\x10\n" +
	"2\xb4\x02\n" +
	"\x16MetricCollectorService\x12T\n" +
	"\n" +
	"SendMetric\x12 .digestlogger.metrics.MetricData\x1a$.digestlogger.metrics.MetricResponse\x12`\n" +
	"\x10SendMetricsBatch\x12!.digestlogger.metrics.MetricBatch\x1a).digestlogger.metrics.MetricBatchResponse\x12b\n" +
	"\vHealthCheck\x12(.digestlogger.metrics.HealthCheckRequest\x1a).digestlogger.metrics.HealthCheckResponseB:\n" +
	"\"com.thinkerbell.digestlogger.protoB\fMetricsProtoZ\x06proto/b\x06proto3"

var (
	file_metrics_proto_rawDescOnce sync.Once
	file_metrics_proto_rawDescData []byte
)

func file_metrics_proto_rawDescGZIP() []byte {
	file_metrics_proto_rawDescOnce.Do(func() {
		file_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metrics_proto_rawDesc), len(file_metrics_proto_rawDesc)))
	})
	return file_metrics_proto_rawDescData
}

var file_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_metrics_proto_goTypes = []any{
	(MetricType)(0),                        // 0: digestlogger.metrics.MetricType
	(HealthCheckResponse_ServingStatus)(0), // 1: digestlogger.metrics.HealthCheckResponse.ServingStatus
	(*MetricData)(nil),                     // 2: digestlogger.metrics.MetricData
	(*ServiceTopology)(nil),                // 3: digestlogger.metrics.ServiceTopology
	(*ErrorInfo)(nil),                      // 4: digestlogger.metrics.ErrorInfo
	(*MetricBatch)(nil),                    // 5: digestlogger.metrics.MetricBatch
	(*MetricResponse)(nil),                 // 6: digestlogger.metrics.MetricResponse
	(*MetricBatchResponse)(nil),            // 7: digestlogger.metrics.MetricBatchResponse
	(*HealthCheckRequest)(nil),             // 8: digestlogger.metrics.HealthCheckRequest
	(*HealthCheckResponse)(nil),            // 9: digestlogger.metrics.HealthCheckResponse
	nil,                                    // 10: digestlogger.metrics.MetricData.AttributesEntry
	nil,                                    // 11: digestlogger.metrics.MetricData.MetadataEntry
}
var file_metrics_proto_depIdxs = []int32{
	0,  // 0: digestlogger.metrics.MetricData.metric_type:type_name -> digestlogger.metrics.MetricType
	3,  // 1: digestlogger.metrics.MetricData.topology:type_name -> digestlogger.metrics.ServiceTopology
	10, // 2: digestlogger.metrics.MetricData.attributes:type_name -> digestlogger.metrics.MetricData.AttributesEntry
	4,  // 3: digestlogger.metrics.MetricData.error:type_name -> digestlogger.metrics.ErrorInfo
	11, // 4: digestlogger.metrics.MetricData.metadata:type_name -> digestlogger.metrics.MetricData.MetadataEntry
	2,  // 5: digestlogger.metrics.MetricBatch.metrics:type_name -> digestlogger.metrics.MetricData
	1,  // 6: digestlogger.metrics.HealthCheckResponse.status:type_name -> digestlogger.metrics.HealthCheckResponse.ServingStatus
	2,  // 7: digestlogger.metrics.MetricCollectorService.SendMetric:input_type -> digestlogger.metrics.MetricData
	5,  // 8: digestlogger.metrics.MetricCollectorService.SendMetricsBatch:input_type -> digestlogger.metrics.MetricBatch
	8,  // 9: digestlogger.metrics.MetricCollectorService.HealthCheck:input_type -> digestlogger.metrics.HealthCheckRequest
	6,  // 10: digestlogger.metrics.MetricCollectorService.SendMetric:output_type -> digestlogger.metrics.MetricResponse
	7,  // 11: digestlogger.metrics.MetricCollectorService.SendMetricsBatch:output_type -> digestlogger.metrics.MetricBatchResponse
	9,  // 12: digestlogger.metrics.MetricCollectorService.HealthCheck:output_type -> digestlogger.metrics.HealthCheckResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_metrics_proto_init() }
func file_metrics_proto_init() {
	if File_metrics_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metrics_proto_rawDesc), len(file_metrics_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metrics_proto_goTypes,
		DependencyIndexes: file_metrics_proto_depIdxs,
		EnumInfos:         file_metrics_proto_enumTypes,
		MessageInfos:      file_metrics_proto_msgTypes,
	}.Build()
	File_metrics_proto = out.File
	file_metrics_proto_goTypes = nil
	file_metrics_proto_depIdxs = nil
}
